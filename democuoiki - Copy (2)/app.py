from flask import Flask, render_template, request,session, redirect, url_for,jsonify,request, send_file
import pandas as pd
import numpy as np
import os
from werkzeug.utils import secure_filename
import psycopg2
import datetime
import joblib
import io
import xlsxwriter
import json
import matplotlib
matplotlib.use('Agg') 
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill
from openpyxl.utils import get_column_letter
import matplotlib.pyplot as plt
import seaborn as sns
from weasyprint import HTML
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from flask import Flask, request, render_template, session, send_file
from reportlab.lib.styles import ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import base64
from reportlab.lib.pagesizes import A4, landscape

app = Flask(__name__)
app.secret_key = 'your_secret_key'  # C·∫ßn thi·∫øt ƒë·ªÉ s·ª≠ d·ª•ng session
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# T·∫°o th∆∞ m·ª•c l∆∞u bi·ªÉu ƒë·ªì n·∫øu ch∆∞a c√≥
if not os.path.exists('static/images'):
    os.makedirs('static/images')


# ƒêƒÉng k√Ω font RobotoCondensed-Regular
font_dir = os.path.join('static', 'fonts')
pdfmetrics.registerFont(TTFont('Roboto_Condensed-Regular', os.path.join(font_dir, 'Roboto_Condensed-Regular.ttf')))

models_path = os.path.join(os.getcwd(), 'models')

# Load c√°c m√¥ h√¨nh ƒë√£ l∆∞u
scaler = joblib.load(os.path.join(models_path, 'minmax_scaler.pkl'))
pca = joblib.load(os.path.join(models_path, 'pca_model.pkl'))

# C·∫•u h√¨nh matplotlib ƒë·ªÉ s·ª≠ d·ª•ng font h·ªó tr·ª£ ti·∫øng Vi·ªát
plt.rcParams['font.family'] = 'sans-serif'
plt.rcParams['font.sans-serif'] = ['Roboto_Condensed-Regular', 'Arial', 'DejaVu Sans']

@app.route("/", methods=["GET", "POST"])
def index():
    return render_template("index.html")

@app.route("/compare", methods=["GET", "POST"])
def compare():
    
    return render_template("compare.html")

# @app.route('/result', methods=['POST'])
# def result():
#     matrix_id = "matrix_" + datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

#     criteria = request.form.getlist('criteria[]')
#     option1_list = request.form.getlist('option1[]')  # c√≥ th·ªÉ th√™m c√°c option kh√°c n·∫øu c√≥

#     options = []
    
#     index = 1
#     while True:
#         key = f'option{index}[]'
#         if key in request.form:
#             values = [float(x) if x else 0.0 for x in request.form.getlist(key)]
#             options.append(values)
#             index += 1
#         else:
#             break

#     data_matrix = np.array(options).T
#     col_sums = np.sum(data_matrix, axis=0)
#     normalized_data = np.divide(data_matrix, col_sums, where=col_sums != 0)
#     rounded_data = np.round(normalized_data, 4)
#     weights = np.mean(rounded_data, axis=1)
#     weights = np.round(weights, 4).tolist()
#     Aw = np.dot(data_matrix, weights)
#     row_sums = np.sum(np.array([data_matrix[:, j] * weights[j] for j in range(len(weights))]), axis=0)
#     consistency_vector = np.divide(row_sums, weights, where=np.array(weights) != 0)
#     lambda_max = np.mean(consistency_vector)
#     n = len(criteria)
#     CI = (lambda_max - n) / (n - 1) if n > 1 else 0
#     RI_dict = {1: 0.0, 2: 0.0, 3: 0.58, 4: 0.90, 5: 1.12, 6: 1.24, 7: 1.32, 8: 1.41, 9: 1.45, 10: 1.49}
#     RI = RI_dict.get(n, 1.49)
#     CR = CI / RI if RI != 0 else 0


# # T·∫°o bi·ªÉu ƒë·ªì
#     # 1. Bi·ªÉu ƒë·ªì c·ªôt
#     plt.figure(figsize=(8, 5))
#     plt.bar(criteria, weights, color='skyblue')
#     plt.title('Tr·ªçng s·ªë c·ªßa t·ª´ng ti√™u ch√≠')
#     plt.xlabel('Ti√™u ch√≠')
#     plt.ylabel('Tr·ªçng s·ªë')
#     plt.grid(axis='y', linestyle='--', alpha=0.7)
#     # plt.savefig('static/images/bar_chart.png')
#     plt.close()


#     # 3. Bi·ªÉu ƒë·ªì nhi·ªát
#     plt.figure(figsize=(8, 6))
#     sns.heatmap(data_matrix, annot=True, fmt='.2f', cmap='Blues', xticklabels=criteria, yticklabels=criteria)
#     plt.title('Ma tr·∫≠n so s√°nh ƒë√¥i')
#     # plt.savefig('static/images/heatmap.png')
#     plt.close()

#     # üëâ L∆∞u d·ªØ li·ªáu v√†o CSDL
#     try:
#         conn = get_connection()
#         cur = conn.cursor()

#         for j, col in enumerate(options):
#             for i, val in enumerate(col):
#                 cur.execute("""
#                     INSERT INTO CriteriaComparison (matrix_id, criteria_row, criteria_col, value)
#                     VALUES (%s, %s, %s, %s)
#                 """, (matrix_id, criteria[i], criteria[j], val))

#         conn.commit()
#         cur.close()
#         conn.close()
#     except Exception as e:
#         return f"‚ùå ƒê√£ x·∫£y ra l·ªói khi l∆∞u v√†o CSDL: {str(e)}"

#     # L∆∞u v√†o session n·∫øu c·∫ßn s·ª≠ d·ª•ng l·∫°i
#     session['criteria'] = criteria
#     session['weights'] = weights

#     return render_template(
#         'result.html',
#         criteria=criteria,
#         data=rounded_data.tolist(),
#         alternatives=criteria,
#         weights=weights,
#         aw=Aw.tolist(),
#         data_matrix=data_matrix.tolist(),
#         weighted_matrix=np.array([data_matrix[:, j] * weights[j] for j in range(len(weights))]).T.tolist(),
#         row_sums=row_sums.tolist(),
#         consistency_vector=consistency_vector.tolist(),
#         lambda_max=lambda_max,
#         ci=CI,
#         cr=CR,
#         weights_vector=weights
#     )
# ---------------------------------------------------d∆∞ ƒëoan khi ch∆∞a c·∫≠p nh·∫≠t t√≠nh ƒë·ªëi x·ª©ng-------------------------
# @app.route('/result', methods=['POST'])
# def result():
#     matrix_id = "matrix_" + datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

#     criteria = request.form.getlist('criteria[]')
#     option1_list = request.form.getlist('option1[]')

#     options = []
#     index = 1
#     while True:
#         key = f'option{index}[]'
#         if key in request.form:
#             values = [float(x) if x else 0.0 for x in request.form.getlist(key)]
#             options.append(values)
#             index += 1
#         else:
#             break

#     data_matrix = np.array(options).T
#     col_sums = np.sum(data_matrix, axis=0)
#     normalized_data = np.divide(data_matrix, col_sums, where=col_sums != 0)
#     rounded_data = np.round(normalized_data, 4)
#     weights = np.mean(rounded_data, axis=1)
#     weights = np.round(weights, 4).tolist()
#     Aw = np.dot(data_matrix, weights)
#     row_sums = np.sum(np.array([data_matrix[:, j] * weights[j] for j in range(len(weights))]), axis=0)
#     consistency_vector = np.divide(row_sums, weights, where=np.array(weights) != 0)
#     lambda_max = np.mean(consistency_vector)
#     n = len(criteria)
#     CI = (lambda_max - n) / (n - 1) if n > 1 else 0
#     RI_dict = {1: 0.0, 2: 0.0, 3: 0.58, 4: 0.90, 5: 1.12, 6: 1.24, 7: 1.32, 8: 1.41, 9: 1.45, 10: 1.49}
#     RI = RI_dict.get(n, 1.49)
#     CR = CI / RI if RI != 0 else 0

#     # T·∫°o bi·ªÉu ƒë·ªì
#     # 1. Bi·ªÉu ƒë·ªì c·ªôt
#     plt.figure(figsize=(8, 5))
#     plt.bar(criteria, weights, color='skyblue')
#     plt.title('Tr·ªçng s·ªë c·ªßa t·ª´ng ti√™u ch√≠')
#     plt.xlabel('Ti√™u ch√≠')
#     plt.ylabel('Tr·ªçng s·ªë')
#     plt.grid(axis='y', linestyle='--', alpha=0.7)
#     plt.savefig('static/images/bar_chart.png')
#     plt.close()

#     # 2. Bi·ªÉu ƒë·ªì radar
#     angles = np.linspace(0, 2 * np.pi, len(criteria), endpoint=False).tolist()
#     weights_plot = weights + weights[:1]
#     angles += angles[:1]
#     fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
#     ax.fill(angles, weights_plot, color='skyblue', alpha=0.25)
#     ax.plot(angles, weights_plot, color='blue', linewidth=2)
#     ax.set_yticklabels([])
#     ax.set_xticks(angles[:-1])
#     ax.set_xticklabels(criteria)
#     plt.title('Bi·ªÉu ƒë·ªì Radar - Tr·ªçng s·ªë ti√™u ch√≠')
#     plt.savefig('static/images/radar_chart.png')
#     plt.close()

#     # 3. Bi·ªÉu ƒë·ªì nhi·ªát
#     plt.figure(figsize=(8, 6))
#     sns.heatmap(data_matrix, annot=True, fmt='.2f', cmap='Blues', xticklabels=criteria, yticklabels=criteria)
#     plt.title('Ma tr·∫≠n so s√°nh ƒë√¥i')
#     plt.savefig('static/images/heatmap.png')
#     plt.close()

#     # L∆∞u d·ªØ li·ªáu v√†o CSDL (gi·ªØ nguy√™n m√£ c·ªßa b·∫°n)
#     try:
#         conn = get_connection()
#         cur = conn.cursor()
#         for j, col in enumerate(options):
#             for i, val in enumerate(col):
#                 cur.execute("""
#                     INSERT INTO CriteriaComparison (matrix_id, criteria_row, criteria_col, value)
#                     VALUES (%s, %s, %s, %s)
#                 """, (matrix_id, criteria[i], criteria[j], val))
#         conn.commit()
#         cur.close()
#         conn.close()
#     except Exception as e:
#         return f"‚ùå ƒê√£ x·∫£y ra l·ªói khi l∆∞u v√†o CSDL: {str(e)}"

#     session['criteria'] = criteria
#     session['weights'] = weights

#     return render_template(
#         'result.html',
#         criteria=criteria,
#         data=rounded_data.tolist(),
#         alternatives=criteria,
#         weights=weights,
#         aw=Aw.tolist(),
#         data_matrix=data_matrix.tolist(),
#         weighted_matrix=np.array([data_matrix[:, j] * weights[j] for j in range(len(weights))]).T.tolist(),
#         row_sums=row_sums.tolist(),
#         consistency_vector=consistency_vector.tolist(),
#         lambda_max=lambda_max,
#         ci=CI,
#         cr=CR,
#         weights_vector=weights
#     )


import unicodedata
@app.route('/result', methods=['POST'])
def result():
    matrix_id = "matrix_" + datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

    # Nh·∫≠n d·ªØ li·ªáu t·ª´ form
    criteria = request.form.getlist('criteria[]')
# Chu·∫©n h√≥a k√Ω t·ª± Unicode
    criteria = [unicodedata.normalize('NFKD', c).encode('ascii', 'ignore').decode('ascii') for c in criteria]
    if not criteria or not all(isinstance(c, str) and c.strip() for c in criteria):
        print("Ti√™u ch√≠ kh√¥ng h·ª£p l·ªá t·ª´ form:", criteria)
        return jsonify({"error": "Ti√™u ch√≠ kh√¥ng h·ª£p l·ªá ho·∫∑c tr·ªëng"}), 400

    options = []
    index = 1
    while True:
        key = f'option{index}[]'
        if key in request.form:
            values = [float(x) if x.strip() else 0.0 for x in request.form.getlist(key)]
            if len(values) != len(criteria):
                print(f"D·ªØ li·ªáu ph∆∞∆°ng √°n {index} kh√¥ng kh·ªõp:", values)
                return jsonify({"error": f"D·ªØ li·ªáu ph∆∞∆°ng √°n {index} kh√¥ng kh·ªõp v·ªõi s·ªë ti√™u ch√≠"}), 400
            options.append(values)
            index += 1
        else:
            break

    if not options:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu ph∆∞∆°ng √°n")
        return jsonify({"error": "Kh√¥ng c√≥ d·ªØ li·ªáu ph∆∞∆°ng √°n ƒë∆∞·ª£c cung c·∫•p"}), 400

    # T·∫°o ma tr·∫≠n d·ªØ li·ªáu
    data_matrix = np.array(options).T
    col_sums = np.sum(data_matrix, axis=0)
    normalized_data = np.divide(data_matrix, col_sums, where=col_sums != 0)
    rounded_data = np.round(normalized_data, 4)
    weights = np.mean(rounded_data, axis=1)
    weights = np.round(weights, 4).tolist()

    # T√≠nh to√°n AHP
    Aw = np.dot(data_matrix, weights)
    row_sums = np.sum(np.array([data_matrix[:, j] * weights[j] for j in range(len(weights))]), axis=0)
    consistency_vector = np.divide(row_sums, weights, where=np.array(weights) != 0)
    lambda_max = np.mean(consistency_vector)
    n = len(criteria)
    CI = (lambda_max - n) / (n - 1) if n > 1 else 0
    RI_dict = {1: 0.0, 2: 0.0, 3: 0.58, 4: 0.90, 5: 1.12, 6: 1.24, 7: 1.32, 8: 1.41, 9: 1.45, 10: 1.49}
    RI = RI_dict.get(n, 1.49)
    CR = CI / RI if RI != 0 else 0

    # T·∫°o bi·ªÉu ƒë·ªì
    plt.figure(figsize=(8, 5))
    plt.bar(criteria, weights, color='skyblue')
    plt.title('Tr·ªçng s·ªë c·ªßa t·ª´ng ti√™u ch√≠')
    plt.xlabel('Ti√™u ch√≠')
    plt.ylabel('Tr·ªçng s·ªë')
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.savefig('static/images/bar_chart.png')
    plt.close()

    angles = np.linspace(0, 2 * np.pi, len(criteria), endpoint=False).tolist()
    weights_plot = weights + weights[:1]
    angles += angles[:1]
    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
    ax.fill(angles, weights_plot, color='skyblue', alpha=0.25)
    ax.plot(angles, weights_plot, color='blue', linewidth=2)
    ax.set_yticklabels([])
    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(criteria)
    plt.title('Bi·ªÉu ƒë·ªì Radar - Tr·ªçng s·ªë ti√™u ch√≠')
    plt.savefig('static/images/radar_chart.png')
    plt.close()

    plt.figure(figsize=(8, 6))
    sns.heatmap(data_matrix, annot=True, fmt='.2f', cmap='Blues', xticklabels=criteria, yticklabels=[f'PA{i+1}' for i in range(len(options))])
    plt.title('Ma tr·∫≠n d·ªØ li·ªáu ƒë·∫ßu v√†o')
    plt.savefig('static/images/heatmap.png')
    plt.close()

    # L∆∞u d·ªØ li·ªáu v√†o CSDL
    try:
        conn = get_connection()
        cur = conn.cursor()
        for j, col in enumerate(options):
            for i, val in enumerate(col):
                cur.execute("""
                    INSERT INTO CriteriaComparison (matrix_id, criteria_row, criteria_col, value)
                    VALUES (%s, %s, %s, %s)
                """, (matrix_id, criteria[i], f'PA{j+1}', val))
        conn.commit()
    except Exception as e:
        print(f"L·ªói l∆∞u CSDL: {str(e)}")
        return jsonify({"error": f"L·ªói khi l∆∞u v√†o CSDL: {str(e)}"}), 500
    finally:
        cur.close()
        conn.close()
# Ki·ªÉm tra JSON tr∆∞·ªõc khi render
    try:
        criteria_json = json.dumps(criteria)
        weights_json = json.dumps(weights)
        print("JSON ki·ªÉm tra:", criteria_json, weights_json)
    except Exception as e:
        print(f"L·ªói t·∫°o JSON trong result: {str(e)}")
        return jsonify({"error": f"L·ªói m√£ h√≥a JSON: {str(e)}"}), 500
    # G·ª° l·ªói tr∆∞·ªõc khi render
    print("Criteria tr∆∞·ªõc khi render result.html:", criteria)
    print("Weights tr∆∞·ªõc khi render result.html:", weights)

    return render_template(
        'result.html',
        criteria=criteria,
        data=rounded_data.tolist(),
        alternatives=[f'PA{i+1}' for i in range(len(options))],
        weights=weights,
        aw=Aw.tolist(),
        data_matrix=data_matrix.tolist(),
        weighted_matrix=np.array([data_matrix[:, j] * weights[j] for j in range(len(weights))]).T.tolist(),
        row_sums=row_sums.tolist(),
        consistency_vector=consistency_vector.tolist(),
        lambda_max=lambda_max,
        ci=CI,
        cr=CR,
        weights_vector=weights
    )



@app.route('/luachontieuchi', methods=['POST'])
def luachontieuchi():
    criteria = request.form.getlist('criteria[]')
    weights = request.form.getlist('weights[]')

    try:
        weights = [float(w) for w in weights]
    except ValueError:
        return "L·ªói: D·ªØ li·ªáu tr·ªçng s·ªë kh√¥ng h·ª£p l·ªá", 400

    # Debug (t√πy ch·ªçn)
    print("Nh·∫≠n ƒë∆∞·ª£c ti√™u ch√≠:", criteria)
    print("Nh·∫≠n ƒë∆∞·ª£c tr·ªçng s·ªë:", weights)

    return render_template('luachontieuchi.html',
                           criteria=criteria,
                           weights=weights)


# @app.route('/luachontieuchi', methods=['GET', 'POST'])
# def luachontieuchi():
#     criteria = session.get('criteria', [])
#     weights = session.get('weights', [])

#     return render_template('luachontieuchi.html',
#                            criteria=criteria,
#                            weights=weights
#                            )


# -----------------------d·ª± phong------------------------------------------------------------------

# @app.route('/combined_input', methods=['GET', 'POST'])
# def combined_input():
#     criteria = session.get('criteria', [])
#     weights = session.get('weights', [])

#     data = []
#     message = ""
#     scores = []  # Danh s√°ch ch·ª©a ƒëi·ªÉm c·ªßa t·ª´ng ph∆∞∆°ng √°n
#     best_option = None  # PA t·ªët nh·∫•t
#     # -------------Th√™m__---------
#     # pairwise_matrices = {}
#     # eigen_vectors = {}
#     # lambda_max_list = []
#     # CI_list = []
#     # CR_list = []

#     # RI_dict = {1: 0.00, 2: 0.00, 3: 0.58, 4: 0.90, 5: 1.12, 6: 1.24, 7: 1.32, 8: 1.41, 9: 1.45, 10: 1.49}

#     if request.method == 'POST':
#         file = request.files.get('excel_file')

#         if file and file.filename.endswith('.xlsx'):
#             try:
#                 df = pd.read_excel(file)
#                 if len(df.columns) >= len(criteria):
#                     data = df.iloc[:3, :len(criteria)].values.tolist()
#                     message = "ƒê·ªçc file Excel th√†nh c√¥ng!"
#             except Exception as e:
#                 message = f"L·ªói khi ƒë·ªçc file Excel: {e}"
#         else:
#             # L·∫•y d·ªØ li·ªáu nh·∫≠p tay
#             for i in range(3):
#                 row = request.form.getlist(f'option{i+1}[]')
#                 if row:
#                     try:
#                         data.append([float(x) if x else 0.0 for x in row])
#                         # values = [float(x) if x and float(x) > 0 else 0.001 for x in row]
#                         # data.append(values)
#                     except:
#                         data.append([0.0 for _ in range(len(criteria))])
#             message = "D·ªØ li·ªáu nh·∫≠p tay ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!"


#         # if data is not None and len(data) > 0 and len(data[0]) == len(criteria):
#         #     data = np.array(data)
#         #     data[data == 0] = 0.001

#         #     for j, crit in enumerate(criteria):
#         #         col = data[:, j]
#         #         matrix = np.zeros((3, 3))
#         #         for i in range(3):
#         #             for k in range(3):
#         #                 matrix[i][k] = col[i] / col[k]

#         #         pairwise_matrices[crit] = matrix
#         #         column_sums = np.sum(matrix, axis=0)
#         #         normalized_matrix = matrix / column_sums
#         #         eigen_vector = np.mean(normalized_matrix, axis=1)
#         #         eigen_vectors[crit] = eigen_vector.round(4)

#         #         lambda_max = np.sum(np.dot(matrix, eigen_vector) / eigen_vector) / 3
#         #         CI = (lambda_max - 3) / (3 - 1)
#         #         RI = RI_dict[3]
#         #         CR = CI / RI if RI != 0 else 0

#         #         lambda_max_list.append(round(lambda_max, 4))
#         #         CI_list.append(round(CI, 4))
#         #         CR_list.append(round(CR, 4))


#         # T√≠nh ƒë·ªô ∆∞u ti√™u n·∫øu c√≥ ƒë·ªß d·ªØ li·ªáu v√† tr·ªçng s·ªë
#         try:
#             if data and weights and len(data[0]) == len(weights):
#                 for row in data:
#                     score = sum([v * w for v, w in zip(row, weights)])
#                     scores.append(round(score, 4))  # L√†m tr√≤n 4 ch·ªØ s·ªë th·∫≠p ph√¢n
#                 best_option = scores.index(max(scores)) + 1  # PA t·ªët nh·∫•t (1-based index)
#         except Exception as e:
#             message += f" | L·ªói t√≠nh to√°n: {e}"

#     return render_template('combined_input.html',
#                            criteria=criteria,
#                            weights=weights,
#                            data=data,
#                            message=message,
#                            scores=scores,
#                            best_option=best_option,
#                         #    pairwise_matrices=pairwise_matrices,
#                         #    eigen_vectors=eigen_vectors,
#                         #    lambda_max_list=lambda_max_list,
#                         #    CI_list=CI_list,
#                         #    CR_list=CR_list 
#     )





# @app.route('/combined_input', methods=['GET', 'POST'])
# def combined_input():
#     # Ti√™u ch√≠ m·∫´u (c√≥ th·ªÉ thay b·∫±ng session n·∫øu c√≥ t·ª´ form tr∆∞·ªõc)
#     criteria = session.get('criteria', ['Chi ph√≠', 'Ch·∫•t l∆∞·ª£ng', 'Th·ªùi gian'])
#     weights = session.get('weights', [0.4, 0.4, 0.2])

#     data = []
#     message = ""
#     scores = []
#     best_option = None

#     pairwise_matrices = {}
#     eigen_vectors = {}
#     vectonhatquan = {}
#     lambda_max_list = []
#     CI_list = []
#     CR_list = []

#     charts = {}

#     RI_dict = {1: 0.0, 2: 0.0, 3: 0.58}

#     if request.method == 'POST':
#         # N·∫øu ng∆∞·ªùi d√πng t·∫£i file Excel
#         file = request.files.get('excel_file')
#         if file and file.filename.endswith('.xlsx'):
#             try:
#                 df = pd.read_excel(file)
#                 data = df.iloc[:3, :len(criteria)].values.tolist()
#                 message = "ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel th√†nh c√¥ng!"
#             except Exception as e:
#                 message = f"L·ªói ƒë·ªçc file Excel: {e}"
#         else:
#             for i in range(3):
#                 row = request.form.getlist(f'option{i+1}[]')
#                 if row:
#                     try:
#                         row_values = [float(x) if x else 0.0 for x in row]
#                         data.append(row_values)
#                     except:
#                         data.append([0.0 for _ in range(len(criteria))])
#             message = "ƒê√£ x·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠p tay!"

#         if data and len(data[0]) == len(criteria):
#             for j, crit in enumerate(criteria):
#                 col = np.array([row[j] for row in data])
#                 matrix = np.zeros((3, 3))
#                 for i in range(3):
#                     for k in range(3):
#                         matrix[i][k] = ratio_to_ahp_scale(col[i], col[k])

#                 pairwise_matrices[crit] = matrix
#                 norm = matrix / np.sum(matrix, axis=0)
#                 eigen_vector = np.mean(norm, axis=1)
#                 eigen_vectors[crit] = eigen_vector.round(4)
#                 vectonhatquan[crit] = (np.dot(matrix, eigen_vector) / eigen_vector).round(4)

#                 lambda_max = np.mean(np.dot(matrix, eigen_vector) / eigen_vector)
#                 CI = (lambda_max - 3) / 2
#                 CR = CI / RI_dict[3] if RI_dict[3] != 0 else 0

#                 lambda_max_list.append(round(lambda_max, 4))
#                 CI_list.append(round(CI, 4))
#                 CR_list.append(round(CR, 4))

#                 save_pairwise_to_postgres(crit, matrix, eigen_vector)

#             # # ƒêi·ªÉm t·ªïng h·ª£p
#             # for row in data:
#             #     score = sum(v * w for v, w in zip(row, weights))
#             #     scores.append(round(score, 4))
#             # best_option = scores.index(max(scores)) + 1


# #chuan h√≥a theo 1
# # T√≠nh ƒëi·ªÉm t·ªïng h·ª£p ban ƒë·∫ßu (ch∆∞a chu·∫©n h√≥a)
#             raw_scores = []
#             for row in data:
#                 score = sum(v * w for v, w in zip(row, weights))
#                 raw_scores.append(score)

#             # ‚úÖ Chu·∫©n h√≥a ƒë·ªÉ t·ªïng = 1
#             total_score = sum(raw_scores)
#             scores = [round(score / total_score, 4) for score in raw_scores]

#             # T√¨m ph∆∞∆°ng √°n t·ªët nh·∫•t
#             best_option = scores.index(max(scores)) + 1
#             # T·∫°o c√°c bi·ªÉu ƒë·ªì (matplotlib + seaborn)
#             def create_chart(fig):
#                 buf = io.BytesIO()
#                 fig.savefig(buf, format='png', bbox_inches='tight')
#                 buf.seek(0)
#                 return base64.b64encode(buf.getvalue()).decode('utf-8')

#             # Bi·ªÉu ƒë·ªì tr·ªçng s·ªë ti√™u ch√≠
#             fig1 = plt.figure()
#             plt.bar(criteria, weights, color='skyblue')
#             plt.title('Tr·ªçng s·ªë ti√™u ch√≠')
#             charts['criteria_weights_bar'] = create_chart(fig1)
#             plt.close()

#             # Bi·ªÉu ƒë·ªì ƒëi·ªÉm ∆∞u ti√™n
#             fig2 = plt.figure()
#             plt.bar(['PA1', 'PA2', 'PA3'], scores, color='lightgreen')
#             plt.title('ƒêi·ªÉm ∆∞u ti√™n ph∆∞∆°ng √°n')
#             charts['scores_bar'] = create_chart(fig2)
#             plt.close()

#             # Radar chart
#             angles = np.linspace(0, 2 * np.pi, len(criteria), endpoint=False).tolist()
#             angles += angles[:1]
#             fig3, ax = plt.subplots(subplot_kw={'polar': True})
#             for i, row in enumerate(data):
#                 values = row + row[:1]
#                 ax.plot(angles, values, label=f'PA{i+1}')
#                 ax.fill(angles, values, alpha=0.1)
#             ax.set_xticks(angles[:-1])
#             ax.set_xticklabels(criteria)
#             ax.set_title('Radar Chart')
#             ax.legend()
#             charts['options_radar'] = create_chart(fig3)
#             plt.close()

#             # Heatmap
#             fig4 = plt.figure()
#             sns.heatmap(pairwise_matrices[criteria[0]], annot=True, cmap='Blues', fmt='.2f',
#                         xticklabels=['PA1', 'PA2', 'PA3'], yticklabels=['PA1', 'PA2', 'PA3'])
#             plt.title(f'Ma tr·∫≠n so s√°nh c·∫∑p ({criteria[0]})')
#             charts['pairwise_heatmap_first'] = create_chart(fig4)
#             plt.close()

#             # C·ªôt nh√≥m eigen vectors
#             fig5, ax = plt.subplots()
#             bar_width = 0.25
#             x = np.arange(len(criteria))
#             for i in range(3):
#                 values = [eigen_vectors[c][i] for c in criteria]
#                 ax.bar(x + i * bar_width, values, bar_width, label=f'PA{i+1}')
#             ax.set_xticks(x + bar_width)
#             ax.set_xticklabels(criteria)
#             ax.legend()
#             ax.set_title('Tr·ªçng s·ªë ph∆∞∆°ng √°n theo ti√™u ch√≠')
#             charts['eigen_vectors_bar'] = create_chart(fig5)
#             plt.close()

#     return render_template('combined_input.html',
#                            criteria=criteria,
#                            weights=weights,
#                            data=data,
#                            message=message,
#                            scores=scores,
#                            best_option=best_option,
#                            pairwise_matrices={k: v.tolist() for k, v in pairwise_matrices.items()},
#                            eigen_vectors={k: v.tolist() for k, v in eigen_vectors.items()},
#                            vectonhatquan={k: v.tolist() for k, v in vectonhatquan.items()},
#                            lambda_max_list=lambda_max_list,
#                            CI_list=CI_list,
#                            CR_list=CR_list,
#                            charts=charts)
# ph·∫ßn n√†y m·ªõi c√≥ th·ªÉ l·∫•y l·∫°i


# @app.route('/combined_input', methods=['GET', 'POST'])
# def combined_input():
#     # Ti√™u ch√≠ m·∫´u (c√≥ th·ªÉ thay b·∫±ng session n·∫øu c√≥ t·ª´ form tr∆∞·ªõc)
#     criteria = session.get('criteria', ['Pin', 'Hi·ªáu Su·∫•t', 'Camera', 'M√†n H√¨nh', 'Tr·ªçng L∆∞·ª£ng', 'K·∫øt N·ªëi', 'B·ªô Nh·ªõ'])
#     weights = session.get('weights', [0.3622, 0.2569, 0.1458, 0.1006, 0.063, 0.0431, 0.0283])

#     data = []
#     message = ""
#     scores = []
#     best_option = None

#     pairwise_matrices = {}
#     eigen_vectors = {}
#     vectonhatquan = {}
#     lambda_max_list = []
#     CI_list = []
#     CR_list = []

#     charts = {}

#     RI_dict = {1: 0.0, 2: 0.0, 3: 0.58}

#     if request.method == 'POST':
#         # N·∫øu ng∆∞·ªùi d√πng t·∫£i file Excel
#         file = request.files.get('excel_file')
#         if file and file.filename.endswith('.xlsx'):
#             try:
#                 df = pd.read_excel(file)
#                 data = df.iloc[:3, :len(criteria)].values.tolist()
#                 print("D·ªØ li·ªáu nh·∫≠p tay:", data)  # In d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra
#                 message = "ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel th√†nh c√¥ng!"
#             except Exception as e:
#                 message = f"L·ªói ƒë·ªçc file Excel: {e}"
#         else:
#             # X·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠p tay
#             for i in range(3):
#                 row = request.form.getlist(f'option{i+1}[]')
#                 if row:
#                     try:
#                         row_values = [float(x) if x else 0.0 for x in row]
#                         data.append(row_values)
#                         print("D·ªØ li·ªáu nh·∫≠p tay:", data)  # In d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra
#                     except:
#                         data.append([0.0 for _ in range(len(criteria))])
#             message = "ƒê√£ x·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠p tay!"

#         if data and len(data[0]) == len(criteria):
#             for j, crit in enumerate(criteria):
#                 col = np.array([row[j] for row in data])
#                 matrix = np.zeros((3, 3))
#                 for i in range(3):
#                     for k in range(3):
#                         matrix[i][k] = ratio_to_ahp_scale(col[i], col[k])

#                 pairwise_matrices[crit] = matrix
#                 norm = matrix / np.sum(matrix, axis=0)
#                 eigen_vector = np.mean(norm, axis=1)
#                 eigen_vectors[crit] = eigen_vector.round(4)
#                 vectonhatquan[crit] = (np.dot(matrix, eigen_vector) / eigen_vector).round(4)

#                 lambda_max = np.mean(np.dot(matrix, eigen_vector) / eigen_vector)
#                 CI = (lambda_max - 3) / 2
#                 CR = CI / RI_dict[3] if RI_dict[3] != 0 else 0

#                 lambda_max_list.append(round(lambda_max, 4))
#                 CI_list.append(round(CI, 4))
#                 CR_list.append(round(CR, 4))

#                 # L∆∞u ma tr·∫≠n v√†o c∆° s·ªü d·ªØ li·ªáu (n·∫øu c·∫ßn)
#                 save_pairwise_to_postgres(crit, matrix, eigen_vector)

#             # T√≠nh ƒëi·ªÉm t·ªïng h·ª£p
#             raw_scores = []
#             for row in data:
#                 score = sum(v * w for v, w in zip(row, weights))
#                 raw_scores.append(score)

#             # Chu·∫©n h√≥a ƒë·ªÉ t·ªïng = 1
#             total_score = sum(raw_scores)
#             scores = [round(score / total_score, 4) for score in raw_scores]
#             best_option = scores.index(max(scores)) + 1

#             # L∆∞u t·∫•t c·∫£ d·ªØ li·ªáu v√†o session
#             session['criteria'] = criteria
#             session['weights'] = weights
#             session['data'] = data
#             print("Received data:", data)
#             session['pairwise_matrices'] = {k: v.tolist() for k, v in pairwise_matrices.items()}
#             session['eigen_vectors'] = {k: v.tolist() for k, v in eigen_vectors.items()}
#             session['vectonhatquan'] = {k: v.tolist() for k, v in vectonhatquan.items()}
#             session['lambda_max_list'] = lambda_max_list
#             session['CI_list'] = CI_list
#             session['CR_list'] = CR_list
#             session['scores'] = scores
#             session['best_option'] = best_option

#             # T·∫°o c√°c bi·ªÉu ƒë·ªì (matplotlib + seaborn)
#             def create_chart(fig):
#                 buf = io.BytesIO()
#                 fig.savefig(buf, format='png', bbox_inches='tight')
#                 buf.seek(0)
#                 return base64.b64encode(buf.getvalue()).decode('utf-8')

#             # Bi·ªÉu ƒë·ªì tr·ªçng s·ªë ti√™u ch√≠
#             fig1 = plt.figure()
#             plt.bar(criteria, weights, color='skyblue')
#             plt.title('Tr·ªçng s·ªë ti√™u ch√≠')
#             charts['criteria_weights_bar'] = create_chart(fig1)
#             plt.close()

#             # Bi·ªÉu ƒë·ªì ƒëi·ªÉm ∆∞u ti√™n
#             fig2 = plt.figure()
#             plt.bar(['PA1', 'PA2', 'PA3'], scores, color='lightgreen')
#             plt.title('ƒêi·ªÉm ∆∞u ti√™n ph∆∞∆°ng √°n')
#             charts['scores_bar'] = create_chart(fig2)
#             plt.close()

#             # Radar chart
#             angles = np.linspace(0, 2 * np.pi, len(criteria), endpoint=False).tolist()
#             angles += angles[:1]
#             fig3, ax = plt.subplots(subplot_kw={'polar': True})
#             for i, row in enumerate(data):
#                 values = row + row[:1]
#                 ax.plot(angles, values, label=f'PA{i+1}')
#                 ax.fill(angles, values, alpha=0.1)
#             ax.set_xticks(angles[:-1])
#             ax.set_xticklabels(criteria)
#             ax.set_title('Radar Chart')
#             ax.legend()
#             charts['options_radar'] = create_chart(fig3)
#             plt.close()

#             # Heatmap
#             fig4 = plt.figure()
#             sns.heatmap(pairwise_matrices[criteria[0]], annot=True, cmap='Blues', fmt='.2f',
#                         xticklabels=['PA1', 'PA2', 'PA3'], yticklabels=['PA1', 'PA2', 'PA3'])
#             plt.title(f'Ma tr·∫≠n so s√°nh c·∫∑p ({criteria[0]})')
#             charts['pairwise_heatmap_first'] = create_chart(fig4)
#             plt.close()

#             # C·ªôt nh√≥m eigen vectors
#             fig5, ax = plt.subplots()
#             bar_width = 0.25
#             x = np.arange(len(criteria))
#             for i in range(3):
#                 values = [eigen_vectors[c][i] for c in criteria]
#                 ax.bar(x + i * bar_width, values, bar_width, label=f'PA{i+1}')
#             ax.set_xticks(x + bar_width)
#             ax.set_xticklabels(criteria)
#             ax.legend()
#             ax.set_title('Tr·ªçng s·ªë ph∆∞∆°ng √°n theo ti√™u ch√≠')
#             charts['eigen_vectors_bar'] = create_chart(fig5)
#             plt.close()

#             # L∆∞u charts v√†o session
#             session['charts'] = charts

#     return render_template('combined_input.html',
#                            criteria=criteria,
#                             weights=weights,
#                             data=data,
#                             message=message,
#                             scores=scores,
#                             best_option=best_option,
#                             pairwise_matrices={k: v.tolist() for k, v in pairwise_matrices.items()},
#                             eigen_vectors={k: v.tolist() for k, v in eigen_vectors.items()},
#                             vectonhatquan={k: v.tolist() for k, v in vectonhatquan.items()},
#                             lambda_max_list=lambda_max_list,
#                             CI_list=CI_list,
#                             CR_list=CR_list,
#                             charts=charts)

def convert_numpy_types(obj):
    """Chuy·ªÉn ƒë·ªïi c√°c ki·ªÉu NumPy th√†nh ki·ªÉu Python native."""
    if isinstance(obj, np.integer):
        return int(obj)
    elif isinstance(obj, np.floating):
        return float(obj)
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    elif isinstance(obj, list):
        return [convert_numpy_types(item) for item in obj]
    elif isinstance(obj, dict):
        return {k: convert_numpy_types(v) for k, v in obj.items()}
    return obj

@app.route('/combined_input', methods=['GET', 'POST'])
def combined_input():
    criteria = []
    weights = []
    data = []
    message = None
    error = None
    scores = None
    best_option = None
    pairwise_matrices = {}
    eigen_vectors = {}
    vectonhatquan = {}
    lambda_max_list = []
    CI_list = []
    CR_list = []
    charts = {}

    if request.method == 'POST':
        try:
            # Nh·∫≠n d·ªØ li·ªáu t·ª´ form
            criteria = request.form.getlist('criteria[]')
            weights_raw = request.form.getlist('weights[]')
            criteria = [unicodedata.normalize('NFKD', c).encode('ascii', 'ignore').decode('utf-8') for c in criteria]

            # G·ª° l·ªói
            print("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c trong combined_input:")
            print(f"criteria: {criteria}")
            print(f"weights_raw: {weights_raw}")

            # Ki·ªÉm tra criteria
            if not criteria or not all(isinstance(c, str) and c.strip() for c in criteria):
                error = "Ti√™u ch√≠ kh√¥ng h·ª£p l·ªá ho·∫∑c tr·ªëng"
                return render_template('combined_input.html', error=error, criteria=criteria, weights=weights, data=data)

            # Chuy·ªÉn ƒë·ªïi weights
            try:
                weights = [float(w) for w in weights_raw]
            except ValueError:
                error = "Tr·ªçng s·ªë ch·ª©a gi√° tr·ªã kh√¥ng h·ª£p l·ªá"
                return render_template('combined_input.html', error=error, criteria=criteria, weights=weights, data=data)

            if len(weights) != len(criteria) or not all(isinstance(w, (int, float)) for w in weights):
                error = "Tr·ªçng s·ªë kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng kh·ªõp v·ªõi s·ªë ti√™u ch√≠"
                return render_template('combined_input.html', error=error, criteria=criteria, weights=weights, data=data)

            # Nh·∫≠n d·ªØ li·ªáu t·ª´ form ho·∫∑c file Excel
            if 'excel_file' in request.files and request.files['excel_file'].filename:
                # X·ª≠ l√Ω file Excel
                file = request.files['excel_file']
                if not file.filename.endswith('.xlsx'):
                    error = "File ph·∫£i l√† ƒë·ªãnh d·∫°ng .xlsx"
                    return render_template('combined_input.html', error=error, criteria=criteria, weights=weights, data=data)
                try:
                    df = pd.read_excel(file, engine='openpyxl')
                    if list(df.columns) != criteria:
                        error = f"C√°c c·ªôt trong Excel ph·∫£i kh·ªõp v·ªõi ti√™u ch√≠: {criteria}"
                        return render_template('combined_input.html', error=error, criteria=criteria, weights=weights, data=data)
                    data = df.values.tolist()
                    data = convert_numpy_types(data)  # Chuy·ªÉn ƒë·ªïi ki·ªÉu NumPy
                    message = "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i t·ª´ file Excel."
                except Exception as e:
                    error = f"L·ªói ƒë·ªçc file Excel: {str(e)}"
                    return render_template('combined_input.html', error=error, criteria=criteria, weights=weights, data=data)
            else:
                # Nh·∫≠n d·ªØ li·ªáu t·ª´ form (nh·∫≠p tay)
                data = []
                for i in range(3):  # PA1, PA2, PA3
                    option = request.form.getlist(f'option{i+1}[]')
                    if len(option) != len(criteria):
                        error = f"D·ªØ li·ªáu ph∆∞∆°ng √°n PA{i+1} kh√¥ng kh·ªõp v·ªõi s·ªë ti√™u ch√≠"
                        return render_template('combined_input.html', error=error, criteria=criteria, weights=weights, data=data)
                    try:
                        data.append([float(x) if x.strip() else 0.0 for x in option])
                    except ValueError:
                        error = f"D·ªØ li·ªáu ph∆∞∆°ng √°n PA{i+1} ch·ª©a gi√° tr·ªã kh√¥ng h·ª£p l·ªá"
                        return render_template('combined_input.html', error=error, criteria=criteria, weights=weights, data=data)
                message = "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c nh·∫≠p tay th√†nh c√¥ng."

            # Ki·ªÉm tra d·ªØ li·ªáu
            if not data or len(data) != 3:
                error = "Ph·∫£i cung c·∫•p d·ªØ li·ªáu cho 3 ph∆∞∆°ng √°n"
                return render_template('combined_input.html', error=error, criteria=criteria, weights=weights, data=data)

            # Ki·ªÉm tra gi√° tr·ªã 0
            if any(data[i][j] == 0 for i in range(3) for j in range(len(criteria))):
                print("C·∫£nh b√°o: D·ªØ li·ªáu ch·ª©a gi√° tr·ªã 0, thay b·∫±ng 0.001 ƒë·ªÉ tr√°nh chia cho 0")
                data = [[max(x, 0.001) for x in row] for row in data]

            # T·∫°o ma tr·∫≠n so s√°nh c·∫∑p v·ªõi thang AHP
            for crit_idx, crit in enumerate(criteria):
                matrix = np.zeros((3, 3))
                for i in range(3):
                    for j in range(3):
                        if i == j:
                            matrix[i][j] = 1.0
                        elif i < j:  # Ch·ªâ t√≠nh n·ª≠a tr√™n
                            val_i = data[i][crit_idx]
                            val_j = data[j][crit_idx]
                            matrix[i][j] = ratio_to_ahp_scale(val_i, val_j)
                            matrix[j][i] = 1.0 / matrix[i][j]  # ƒê·∫£m b·∫£o ƒë·ªëi x·ª©ng
                pairwise_matrices[crit] = convert_numpy_types(matrix)

                # T√≠nh eigenvector
                eigenvalues, eigenvectors = np.linalg.eig(matrix)
                max_eigenvalue = np.max(np.real(eigenvalues))
                max_eigenvector = np.real(eigenvectors[:, np.argmax(np.real(eigenvalues))])
                max_eigenvector = max_eigenvector / np.sum(max_eigenvector)
                eigen_vectors[crit] = convert_numpy_types(max_eigenvector)

                # T√≠nh vector nh·∫•t qu√°n
                Aw = np.dot(matrix, max_eigenvector)
                consistency_vector = Aw / max_eigenvector
                vectonhatquan[crit] = convert_numpy_types(consistency_vector)

                # T√≠nh Œª max, CI, CR
                lambda_max = np.mean(consistency_vector)
                n = 3
                CI = (lambda_max - n) / (n - 1) if n > 1 else 0
                RI = 0.58  # RI cho n=3
                CR = CI / RI if RI != 0 else 0

                lambda_max_list.append(round(float(lambda_max), 4))
                CI_list.append(round(float(CI), 4))
                CR_list.append(round(float(CR), 4))

            # T√≠nh ƒëi·ªÉm ∆∞u ti√™n
            scores = np.zeros(3)
            for crit_idx, crit in enumerate(criteria):
                for i in range(3):
                    scores[i] += eigen_vectors[crit][i] * weights[crit_idx]
            scores = convert_numpy_types(scores)

            # X√°c ƒë·ªãnh ph∆∞∆°ng √°n t·ªët nh·∫•t
            best_option = int(np.argmax(scores)) + 1

            # T·∫°o bi·ªÉu ƒë·ªì
            # Bi·ªÉu ƒë·ªì c·ªôt - Tr·ªçng s·ªë ti√™u ch√≠
            fig, ax = plt.subplots(figsize=(8, 5))
            ax.bar(criteria, weights, color='skyblue')
            ax.set_title('Tr·ªçng s·ªë c·ªßa t·ª´ng ti√™u ch√≠')
            ax.set_xlabel('Ti√™u ch√≠')
            ax.set_ylabel('Tr·ªçng s·ªë')
            ax.grid(axis='y', linestyle='--', alpha=0.7)
            plt.xticks(rotation=45, ha='right')
            buf = io.BytesIO()
            plt.savefig(buf, format='png', bbox_inches='tight')
            buf.seek(0)
            charts['criteria_weights_bar'] = base64.b64encode(buf.getvalue()).decode('utf-8')
            plt.close()

            # Bi·ªÉu ƒë·ªì c·ªôt - ƒêi·ªÉm ∆∞u ti√™n
            fig, ax = plt.subplots(figsize=(8, 5))
            ax.bar(['PA1', 'PA2', 'PA3'], scores, color='lightgreen')
            ax.set_title('ƒêi·ªÉm ∆∞u ti√™n c·ªßa c√°c ph∆∞∆°ng √°n')
            ax.set_xlabel('Ph∆∞∆°ng √°n')
            ax.set_ylabel('ƒêi·ªÉm ∆∞u ti√™n')
            ax.grid(axis='y', linestyle='--', alpha=0.7)
            buf = io.BytesIO()
            plt.savefig(buf, format='png')
            buf.seek(0)
            charts['scores_bar'] = base64.b64encode(buf.getvalue()).decode('utf-8')
            plt.close()

            # Bi·ªÉu ƒë·ªì radar
            angles = np.linspace(0, 2 * np.pi, len(criteria), endpoint=False).tolist()
            angles += angles[:1]
            fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
            for i in range(3):
                values = [eigen_vectors[crit][i] for crit in criteria] + [eigen_vectors[criteria[0]][i]]
                ax.plot(angles, values, label=f'PA{i+1}')
                ax.fill(angles, values, alpha=0.1)
            ax.set_xticks(angles[:-1])
            ax.set_xticklabels(criteria)
            ax.set_title('Bi·ªÉu ƒë·ªì Radar - ƒêi·ªÉm s·ªë ph∆∞∆°ng √°n')
            ax.legend()
            buf = io.BytesIO()
            plt.savefig(buf, format='png')
            buf.seek(0)
            charts['options_radar'] = base64.b64encode(buf.getvalue()).decode('utf-8')
            plt.close()

            # Bi·ªÉu ƒë·ªì nhi·ªát - Ma tr·∫≠n so s√°nh c·∫∑p (ti√™u ch√≠ ƒë·∫ßu ti√™n)
            fig, ax = plt.subplots(figsize=(8, 6))
            sns.heatmap(pairwise_matrices[criteria[0]], annot=True, fmt='.2f', cmap='Blues', ax=ax,
                        xticklabels=['PA1', 'PA2', 'PA3'], yticklabels=['PA1', 'PA2', 'PA3'])
            ax.set_title(f'Ma tr·∫≠n so s√°nh c·∫∑p - Ti√™u ch√≠: {criteria[0]}')
            buf = io.BytesIO()
            plt.savefig(buf, format='png')
            buf.seek(0)
            charts['pairwise_heatmap_first'] = base64.b64encode(buf.getvalue()).decode('utf-8')
            plt.close()

            # Bi·ªÉu ƒë·ªì c·ªôt nh√≥m - Tr·ªçng s·ªë ph∆∞∆°ng √°n theo ti√™u ch√≠
            fig, ax = plt.subplots(figsize=(10, 6))
            x = np.arange(len(criteria))
            width = 0.25
            for i in range(3):
                ax.bar(x + i * width, [eigen_vectors[crit][i] for crit in criteria], width, label=f'PA{i+1}')
            ax.set_xticks(x + width)
            ax.set_xticklabels(criteria)
            ax.set_title('Tr·ªçng s·ªë ph∆∞∆°ng √°n theo ti√™u ch√≠')
            ax.set_ylabel('Tr·ªçng s·ªë')
            ax.legend()
            ax.grid(axis='y', linestyle='--', alpha=0.7)
            plt.xticks(rotation=45, ha='right')
            buf = io.BytesIO()
            plt.savefig(buf, format='png', bbox_inches='tight')
            buf.seek(0)
            charts['eigen_vectors_bar'] = base64.b64encode(buf.getvalue()).decode('utf-8')
            plt.close()

        except Exception as e:
            print(f"L·ªói trong combined_input: {str(e)}")
            error = f"L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}"
            return render_template('combined_input.html', error=error, criteria=criteria, weights=weights, data=data)


    # Render template
    return render_template('combined_input.html',
                           criteria=criteria,
                           weights=weights,
                           data=data,
                           message=message,
                           error=error,
                           scores=scores,
                           best_option=best_option,
                           pairwise_matrices=pairwise_matrices,
                           eigen_vectors=eigen_vectors,
                           vectonhatquan=vectonhatquan,
                           lambda_max_list=lambda_max_list,
                           CI_list=CI_list,
                           CR_list=CR_list,
                           charts=charts)





def generate_matrix_id():
    # L·∫•y th·ªùi gian hi·ªán t·∫°i v√† ƒë·ªãnh d·∫°ng th√†nh YYYYMMDD_HHMMSS
    # current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
    current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    return f"matrix_{current_time}"

# # H√†m quy ƒë·ªïi t·ªâ l·ªá sang thang AHP
# def ratio_to_ahp_scale(val1, val2):
#     if val2 == 0:
#         return 1
#     ratio = val1 / val2
#     if ratio >= 9:
#         return 9
#     elif ratio <= 1/9:
#         return 1/9
#     else:
#         return round(ratio, 2)
# H√†m quy ƒë·ªïi t·ªâ l·ªá sang thang chu·∫©n AHP (1/9 ƒë·∫øn 9)
def ratio_to_ahp_scale(val1, val2):
    ahp_scale = [1/9, 1/8, 1/7, 1/6, 1/5, 1/4, 1/3, 1/2,
                 1, 2, 3, 4, 5, 6, 7, 8, 9]
    
    if val2 == 0:
        return 1  # ho·∫∑c raise l·ªói

    ratio = val1 / val2

    # T√¨m gi√° tr·ªã g·∫ßn nh·∫•t trong thang AHP
    closest = min(ahp_scale, key=lambda x: abs(x - ratio))
    return closest



# H√†m l∆∞u d·ªØ li·ªáu c√°c√°c ph∆∞∆°ng √°n v√†o PostgreSQL
def save_to_postgres(data, weights):
    conn = get_connection()
    cur = conn.cursor()

    # X√≥a d·ªØ li·ªáu c≈© (t√πy ch·ªçn, n·∫øu mu·ªën gi·ªØ l·ªãch s·ª≠ th√¨ b·ªè d√≤ng n√†y)
    cur.execute("DELETE FROM options_data")

    # T·∫°o matrix_id cho nh√≥m b·∫£n ghi
    matrix_id = generate_matrix_id()

    # L∆∞u d·ªØ li·ªáu ph∆∞∆°ng √°n
    for i, row in enumerate(data, 1):
        cur.execute(
            "INSERT INTO options_data (option_id, pin, performance, camera, screen, weight, connectivity, memory, matrix_id) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)",
            (f'PA{i}', row[0], row[1], row[2], row[3], row[4], row[5], row[6], matrix_id)
        )

    # L∆∞u tr·ªçng s·ªë
    cur.execute(
        "INSERT INTO options_data (option_id, pin, performance, camera, screen, weight, connectivity, memory, matrix_id) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)",
        ('Weights', weights[0], weights[1], weights[2], weights[3], weights[4], weights[5], weights[6], matrix_id)
    )

    conn.commit()
    cur.close()
    conn.close()



# H√†m l∆∞u ma tr·∫≠n so s√°nh c·∫∑p v√† tr·ªçng s·ªë v√†o PostgreSQL
def save_pairwise_to_postgres(criterion, matrix, weights):
    conn = get_connection()
    cur = conn.cursor()

    # X√≥a d·ªØ li·ªáu c≈© cho ti√™u ch√≠ n√†y (n·∫øu c·∫ßn)
    cur.execute("DELETE FROM pairwise_comparison WHERE criterion = %s", (criterion,))

    # T·∫°o matrix_id cho nh√≥m b·∫£n ghi
    matrix_id = generate_matrix_id()

    # L∆∞u ma tr·∫≠n so s√°nh c·∫∑p
    for i in range(3):
        for j in range(3):
            cur.execute(
                "INSERT INTO pairwise_comparison (criterion, option1, option2, pairwise_value, weight, matrix_id) VALUES (%s, %s, %s, %s, %s, %s)",
                (criterion, f'PA{i+1}', f'PA{j+1}', float(matrix[i][j]), None, matrix_id)
            )

    # L∆∞u tr·ªçng s·ªë
    for i, weight in enumerate(weights, 1):
        cur.execute(
            "INSERT INTO pairwise_comparison (criterion, option1, option2, pairwise_value, weight, matrix_id) VALUES (%s, %s, %s, %s, %s, %s)",
            (criterion, f'PA{i}', 'Weight', None, float(weight), matrix_id)
        )

    conn.commit()
    cur.close()
    conn.close()


# H√†m l∆∞u ƒëi·ªÉm ∆∞u ti√™n v√†o PostgreSQL
def save_scores(scores):
    conn = get_connection()
    cur = conn.cursor()

    # X√≥a d·ªØ li·ªáu c≈© (n·∫øu c·∫ßn)
    cur.execute("DELETE FROM option_scores")

    # T·∫°o matrix_id cho nh√≥m b·∫£n ghi
    matrix_id = generate_matrix_id()

    # L∆∞u ƒëi·ªÉm ∆∞u ti√™n
    for i, score in enumerate(scores, 1):
        cur.execute(
            "INSERT INTO option_scores (option_id, score, matrix_id) VALUES (%s, %s, %s)",
            (f'PA{i}', float(score), matrix_id)
        )

    conn.commit()
    cur.close()
    conn.close()

def convert_numpy_types(obj):
    """Chuy·ªÉn ƒë·ªïi c√°c ki·ªÉu NumPy th√†nh ki·ªÉu Python native."""
    if isinstance(obj, np.integer):
        return int(obj)
    elif isinstance(obj, np.floating):
        return float(obj)
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    elif isinstance(obj, list):
        return [convert_numpy_types(item) for item in obj]
    elif isinstance(obj, dict):
        return {k: convert_numpy_types(v) for k, v in obj.items()}
    return obj



import openpyxl
from openpyxl.utils import get_column_letter
from openpyxl.styles import Font, Alignment
@app.route('/export_excel', methods=['POST'])

def export_excel():
    print("[DEBUG] D·ªØ li·ªáu POST:", request.form)

    try:
        # Helper function
        def load_json_field(key):
            val = request.form.get(key, '')
            if not val:
                raise ValueError(f"Thi·∫øu ho·∫∑c r·ªóng: {key}")
            return json.loads(val)

        # Load form data
        data = load_json_field('data')
        criteria = load_json_field('criteria')
        weights = load_json_field('weights')
        pairwise_matrices = load_json_field('pairwise_matrices')
        eigen_vectors = load_json_field('eigen_vectors')
        vectonhatquan = load_json_field('vectonhatquan')
        lambda_max_list = load_json_field('lambda_max_list')
        CI_list = load_json_field('CI_list')
        CR_list = load_json_field('CR_list')
        scores = load_json_field('scores')
        best_option = load_json_field('best_option')

        # Create workbook
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "T·ªïng quan AHP"

        bold_center = Font(bold=True)
        center = Alignment(horizontal="center")

        # Sheet 1: Ma tr·∫≠n ph∆∞∆°ng √°n
        ws.append(["Ph∆∞∆°ng √°n"] + criteria)
        for i, row in enumerate(data):
            ws.append([f"PA{i+1}"] + row)
        ws.append(["Tr·ªçng s·ªë"] + weights)

        # Auto-width
        for col in ws.columns:
            max_len = max((len(str(cell.value)) for cell in col if cell.value), default=0)
            ws.column_dimensions[get_column_letter(col[0].column)].width = max_len + 2

        # Format headers
        for cell in ws[1]:
            cell.font = bold_center
            cell.alignment = center

        # Sheet 2+: Ma tr·∫≠n so s√°nh c·∫∑p t·ª´ng ti√™u ch√≠
        for idx, crit in enumerate(criteria):
            ws_matrix = wb.create_sheet(title=f"So s√°nh - {crit}")
            ws_matrix.append([""] + [f"PA{i+1}" for i in range(3)] + ["Tr·ªçng s·ªë", "Vecto nh·∫•t qu√°n"])
            for i in range(3):
                row = [f"PA{i+1}"]
                row += pairwise_matrices[crit][i]
                row += [eigen_vectors[crit][i], vectonhatquan[crit][i]]
                ws_matrix.append(row)

            ws_matrix.append([])
            ws_matrix.append(["Œª max", lambda_max_list[idx]])
            ws_matrix.append(["CI", CI_list[idx]])
            ws_matrix.append(["CR", CR_list[idx]])

            for cell in ws_matrix[1]:
                cell.font = bold_center
                cell.alignment = center
            for col in ws_matrix.columns:
                max_len = max((len(str(cell.value)) for cell in col if cell.value), default=0)
                ws_matrix.column_dimensions[get_column_letter(col[0].column)].width = max_len + 2

        # Sheet cu·ªëi: T·ªïng h·ª£p ƒëi·ªÉm ∆∞u ti√™n
        ws_result = wb.create_sheet(title="K·∫øt qu·∫£")
        ws_result.append(["Ph∆∞∆°ng √°n", "ƒêi·ªÉm ∆∞u ti√™n"])
        for i, score in enumerate(scores):
            ws_result.append([f"PA{i+1}", score])
        ws_result.append([])
        ws_result.append(["Ph∆∞∆°ng √°n t·ªët nh·∫•t", f"PA{best_option}"])

        for cell in ws_result[1]:
            cell.font = bold_center
            cell.alignment = center

        # Xu·∫•t file
        output = io.BytesIO()
        wb.save(output)
        output.seek(0)
        return send_file(output,
                         as_attachment=True,
                         download_name="AHP_Results.xlsx",
                         mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    except Exception as e:
        print(f"L·ªói trong export_excel: {e}")
        return f"L·ªói xu·∫•t Excel: {str(e)}", 500


# ƒêƒÉng k√Ω font Roboto ho·∫∑c Arial c√≥ h·ªó tr·ª£ Unicode
pdfmetrics.registerFont(TTFont('Roboto', 'static/fonts/Roboto_Condensed-Black.ttf'))
@app.route('/export_pdf', methods=['POST', 'GET'])
def export_pdf():
    styles = getSampleStyleSheet()

        # T·∫°o styles m·ªõi h·ªó tr·ª£ ti·∫øng Vi·ªát
    styleH = ParagraphStyle(name='Heading2', fontName='Roboto', fontSize=18, leading=22)
    styleSubH = ParagraphStyle(name='Heading3', fontName='Roboto', fontSize=14, leading=18)
    styleSmallH = ParagraphStyle(name='Heading4', fontName='Roboto', fontSize=12, leading=16)
    styleN = ParagraphStyle(name='Normal', fontName='Roboto', fontSize=11, leading=14)
    try:
        # Helper function
        def load_json_field(key):
            val = request.form.get(key, '')
            if not val:
                raise ValueError(f"Thi·∫øu ho·∫∑c r·ªóng: {key}")
            return json.loads(val)
        # L·∫•y d·ªØ li·ªáu t·ª´ form ho·∫∑c query string
        data = load_json_field('data') or []
        criteria = load_json_field('criteria') or []
        weights = load_json_field('weights') or []
        pairwise_matrices = load_json_field('pairwise_matrices') or {}
        eigen_vectors = load_json_field('eigen_vectors') or {}
        vectonhatquan = load_json_field('vectonhatquan') or {}
        lambda_max_list = load_json_field('lambda_max_list') or []
        CI_list = load_json_field('CI_list') or []
        CR_list = load_json_field('CR_list') or []
        scores = load_json_field('scores') or []
        best_option = load_json_field('best_option')

        charts = load_json_field('charts') or {}

        # --- Ph·∫ßn t·∫°o PDF gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc ---
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=landscape(A4), rightMargin=30,leftMargin=30, topMargin=30,bottomMargin=18)
        elements = []
        styles = getSampleStyleSheet()
        styleH = ParagraphStyle(name='Heading2', fontName='Roboto', fontSize=18, leading=22)
        styleSubH = ParagraphStyle(name='Heading3', fontName='Roboto', fontSize=14, leading=18)
        styleSmallH = ParagraphStyle(name='Heading4', fontName='Roboto', fontSize=12, leading=16)
        styleN = ParagraphStyle(name='Normal', fontName='Roboto', fontSize=11, leading=14)


        elements.append(Paragraph("B√°o c√°o Ph√¢n t√≠ch Ph∆∞∆°ng √°n (AHP)", styleH))
        elements.append(Spacer(1, 12))

        elements.append(Paragraph("1. D·ªØ li·ªáu ph∆∞∆°ng √°n:", styleSubH))
        data_table = [['Ph∆∞∆°ng √°n'] + criteria]
        for i, row in enumerate(data):
            data_table.append([f"PA{i+1}"] + [f"{float(v):.4f}" for v in row])
        table = Table(data_table, hAlign='LEFT')
        table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Roboto'),  # üëà G√°n font Roboto cho to√†n b·ªô b·∫£ng
            ('BACKGROUND', (0,0), (-1,0), colors.grey),
            ('TEXTCOLOR',(0,0),(-1,0),colors.whitesmoke),
            ('ALIGN',(0,0),(-1,-1),'CENTER'),
            ('GRID', (0,0), (-1,-1), 1, colors.black)
        ]))
        elements.append(table)
        elements.append(Spacer(1, 12))

        elements.append(Paragraph("2. Tr·ªçng s·ªë ti√™u ch√≠:", styleSubH))
        weights_table = [['Ti√™u ch√≠', 'Tr·ªçng s·ªë']]
        for c, w in zip(criteria, weights):
            elements.append(Paragraph(f"{c}: {float(w):.4f}", styleN))
        elements.append(Spacer(1, 12))

        elements.append(Paragraph("3. K·∫øt qu·∫£ t√≠nh to√°n chi ti·∫øt:", styleSmallH))
        for idx, crit in enumerate(criteria):
            elements.append(Paragraph(f"Ti√™u ch√≠: {crit}", styleSmallH))

            matrix = pairwise_matrices.get(crit, [])
            if matrix:
                mat_data = [[f"{crit}"] + [f"PA{i+1}" for i in range(3)]]
                for i in range(3):
                    mat_data.append([f"PA{i+1}"] + [f"{float(matrix[i][j]):.3f}" for j in range(3)])
                t = Table(mat_data)
                t.setStyle(TableStyle([
                    ('FONTNAME', (0, 0), (-1, -1), 'Roboto'),  # üëà G√°n font Roboto cho to√†n b·ªô b·∫£ng
                    ('BACKGROUND', (0,0), (-1,0), colors.grey),
                    ('TEXTCOLOR',(0,0),(-1,0),colors.whitesmoke),
                    ('ALIGN',(0,0),(-1,-1),'CENTER'),
                    ('GRID', (0,0), (-1,-1), 1, colors.black)
                ]))
                elements.append(t)
                elements.append(Spacer(1, 6))

            ev = eigen_vectors.get(crit, [])
            vnhq = vectonhatquan.get(crit, [])
            if ev and vnhq:
                ev_data = [['Ph∆∞∆°ng √°n', 'Eigen Vector', 'Vector Nh·∫•t Qu√°n']]
                for i in range(3):
                    ev_data.append([f"PA{i+1}", f"{float(ev[i]):.4f}", f"{float(vnhq[i]):.4f}"])
                t2 = Table(ev_data)
                t2.setStyle(TableStyle([
                    ('FONTNAME', (0, 0), (-1, -1), 'Roboto'), 
                    ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
                    ('ALIGN',(0,0),(-1,-1),'CENTER'),
                    ('GRID', (0,0), (-1,-1), 1, colors.black)
                ]))
                elements.append(t2)
                elements.append(Spacer(1, 6))

            elements.append(Paragraph(f"Œª max: {float(lambda_max_list[idx]):.4f}", styleN))
            elements.append(Paragraph(f"CI: {float(CI_list[idx]):.4f}", styleN))
            cr_val = float(CR_list[idx])
            cr_status = "‚úÖ (H·ª£p l√Ω)" if cr_val < 0.1 else "‚ùå (Kh√¥ng h·ª£p l√Ω)"
            elements.append(Paragraph(f"CR: {cr_val:.4f} {cr_status}", styleN))
            elements.append(Spacer(1, 12))

        elements.append(Paragraph("4. ƒêi·ªÉm ∆∞u ti√™n c√°c ph∆∞∆°ng √°n:", styleSmallH))
        scores_table = [['Ph∆∞∆°ng √°n', 'ƒêi·ªÉm ∆∞u ti√™n']]
        for i, s in enumerate(scores):
            scores_table.append([f"PA{i+1}", f"{float(s):.4f}"])
        t_scores = Table(scores_table)
        t_scores.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Roboto'),
            ('BACKGROUND', (0,0), (-1,0), colors.grey),
            ('TEXTCOLOR',(0,0),(-1,0),colors.whitesmoke),
            ('ALIGN',(0,0),(-1,-1),'CENTER'),
            ('GRID', (0,0), (-1,-1), 1, colors.black)
        ]))
        elements.append(t_scores)
        elements.append(Spacer(1, 12))

        if best_option:
            elements.append(Paragraph(f"Ph∆∞∆°ng √°n t·ªët nh·∫•t l√†: PA{int(best_option)}", styleSmallH))
            elements.append(Spacer(1, 12))

        for title, img_base64 in charts.items():
            elements.append(Paragraph(title.replace('_', ' ').capitalize(), styleSmallH))
            img_data = base64.b64decode(img_base64)
            img_buffer = io.BytesIO(img_data)
            img = Image(img_buffer, width=400, height=250)
            elements.append(img)
            elements.append(Spacer(1, 12))

        doc.build(elements)
        buffer.seek(0)

        return send_file(buffer, as_attachment=True, download_name="bao_cao_ahp.pdf", mimetype='application/pdf')

    except Exception as e:
        return f"L·ªói khi xu·∫•t PDF: {str(e)}"


@app.route('/ketqua', methods=['POST'])
def ketqua():
    import numpy as np
    from flask import request

    criteria = session.get('criteria', [])
    weights = session.get('weights', [])
    data = request.form.get('data_json')

    import json
    matrix = json.loads(data)

    # V√≠ d·ª• x·ª≠ l√Ω: chu·∫©n h√≥a v√† nh√¢n tr·ªçng s·ªë
    norm = np.array(matrix) / np.linalg.norm(matrix, axis=0)
    weighted = norm * weights
    scores = weighted.sum(axis=1)
    best_index = int(np.argmax(scores))
    best_pa = f"PA{best_index + 1}"

    return render_template("ketqua.html", scores=scores, best_pa=best_pa, matrix=matrix, criteria=criteria)

def get_connection():
    return psycopg2.connect(
        host="localhost",
        database="AHP",
        user="postgres",
        password="123"
    )

def save_to_db(matrix_id, criteria_list, option1_list):
    try:
        conn = get_connection()
        cur = conn.cursor()

        for i in range(len(criteria_list)):
            row_criteria = criteria_list[i]
            col_criteria = "Ph∆∞∆°ng √°n 1"
            value = float(option1_list[i]) if option1_list[i] else 0.0

            cur.execute("""
                INSERT INTO CriteriaComparison (matrix_id, criteria_row, criteria_col, value)
                VALUES (%s, %s, %s, %s)
            """, (matrix_id, row_criteria, col_criteria, value))

        conn.commit()
        cur.close()
        conn.close()

        return True
    except Exception as e:
        print(f"L·ªói khi l∆∞u v√†o DB: {e}")
        return False

# @app.route('/criteria-matrix')
# def criteria_matrix():
#     matrix_id = request.args.get('matrix_id', default=None)

#     if not matrix_id:
#         return "Kh√¥ng c√≥ matrix_id ƒë∆∞·ª£c ch·ªçn!"

#     conn = get_connection()
#     cur = conn.cursor()
#     cur.execute("SELECT criteria_row, criteria_col, value FROM public.criteriacomparison WHERE matrix_id = %s", (matrix_id,))
#     rows = cur.fetchall()
#     conn.close()

#     criteria = []
#     matrix = {}

#     for row, col, val in rows:
#         if row not in criteria:
#             criteria.append(row)
#         if col not in criteria:
#             criteria.append(col)
#         if row not in matrix:
#             matrix[row] = {}
#         matrix[row][col] = val

#     return render_template("matrix_view.html", criteria=criteria, matrix=matrix, matrix_id=matrix_id)




@app.route('/criteria-matrix')
def criteria_matrix():
    matrix_id = request.args.get('matrix_id', default=None)

    if not matrix_id:
        return "Kh√¥ng c√≥ matrix_id ƒë∆∞·ª£c ch·ªçn!"

    conn = get_connection()
    cur = conn.cursor()

    # Truy v·∫•n ma tr·∫≠n ti√™u ch√≠ t·ª´ b·∫£ng criteriacomparison
    cur.execute("SELECT criteria_row, criteria_col, value FROM public.criteriacomparison WHERE matrix_id = %s", (matrix_id,))
    rows = cur.fetchall()

    criteria = []
    matrix = {}
    for row, col, val in rows:
        if row not in criteria:
            criteria.append(row)
        if col not in criteria:
            criteria.append(col)
        if row not in matrix:
            matrix[row] = {}
        matrix[row][col] = val

    # Truy v·∫•n ma tr·∫≠n so s√°nh c·∫∑p v√† tr·ªçng s·ªë t·ª´ b·∫£ng pairwise_comparison
    cur.execute(
        "SELECT criterion, option1, option2, pairwise_value, weight FROM public.pairwise_comparison WHERE matrix_id = %s",
        (matrix_id,)
    )
    pairwise_rows = cur.fetchall()

    pairwise_matrices = {}
    eigen_vectors = {}
    for crit, opt1, opt2, val, weight in pairwise_rows:
        if crit not in pairwise_matrices:
            pairwise_matrices[crit] = np.zeros((3, 3))
        if crit not in eigen_vectors:
            eigen_vectors[crit] = np.zeros(3)

        if val is not None:
            i = int(opt1[-1]) - 1
            j = int(opt2[-1]) - 1
            pairwise_matrices[crit][i][j] = val
        if weight is not None:
            i = int(opt1[-1]) - 1
            eigen_vectors[crit][i] = weight

    # Truy v·∫•n d·ªØ li·ªáu t·ª´ options_data d·ª±a tr√™n matrix_id
    cur.execute(
        "SELECT id, matrix_id, option_id, pin, performance, camera, screen, weight, connectivity, memory FROM public.options_data WHERE matrix_id = %s",
        (matrix_id,)
    )
    options_rows = cur.fetchall()

    # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh danh s√°ch t·ª´ ƒëi·ªÉn
    options_data = [
        {
            'id': row[0],
            'matrix_id': row[1],
            'option_id': row[2],
            'pin': row[3],
            'performance': row[4],
            'camera': row[5],
            'screen': row[6],
            'weight': row[7],
            'connectivity': row[8],
            'memory': row[9]
        } for row in options_rows
    ]

    conn.close()

    return render_template('matrix_view.html',
                          criteria=criteria,
                          matrix=matrix,
                          pairwise_matrices=pairwise_matrices,
                          eigen_vectors=eigen_vectors,
                          matrix_id=matrix_id,
                          options_data=options_data)



@app.route('/list-matrix')
def list_matrix():
    conn = get_connection()
    cur = conn.cursor()
    
    # L·∫•y danh s√°ch t·∫•t c·∫£ matrix_id (kh√¥ng tr√πng)
    cur.execute("SELECT DISTINCT matrix_id FROM public.criteriacomparison ORDER BY matrix_id DESC")
    matrix_ids = [row[0] for row in cur.fetchall()]
    
    conn.close()
    
    return render_template('list_matrix.html', matrix_ids=matrix_ids)


@app.route('/matrix-history')
def matrix_history():
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT DISTINCT matrix_id FROM public.criteriacomparison ORDER BY matrix_id DESC")
    rows = cur.fetchall()
    conn.close()

    # Tr·∫£ v·ªÅ danh s√°ch d∆∞·ªõi d·∫°ng JSON
    matrix_ids = [row[0] for row in rows]
    return jsonify(matrix_ids)


# Route m·ªõi ƒë·ªÉ l·∫•y l·ªãch s·ª≠ c√°c ph∆∞∆°ng √°n
@app.route('/option-history')
def option_history():
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT DISTINCT matrix_id FROM public.options_data ORDER BY matrix_id DESC")
    rows = cur.fetchall()
    conn.close()   

 # Tr·∫£ v·ªÅ danh s√°ch d∆∞·ªõi d·∫°ng JSON
    options_ids = [row[0] for row in rows]
    return jsonify(options_ids)




# _--------------------------------------------AI D·ª± ƒêo√°n---------------------------------------
@app.route('/dudoanai', methods=['POST'])
def dudoanai():
# Ki·ªÉm tra xem c√≥ file ƒë∆∞·ª£c g·ª≠i l√™n kh√¥ng
    if 'file' not in request.files:
        return 'Kh√¥ng c√≥ file', 400
    
    file = request.files['file']
    
    # ƒê·ªçc file Excel
    df = pd.read_excel(file)
    
    # Chu·∫©n h√≥a d·ªØ li·ªáu m·ªõi v·ªõi scaler ƒë√£ l∆∞u
    scaled_new = scaler.transform(df)
    
    # D·ª± ƒëo√°n PCA
    pca_result_new = pca.transform(scaled_new)
    
    # T√≠nh ƒëi·ªÉm PCA v√† s·∫Øp x·∫øp
    df['PCA_score'] = pca_result_new[:, 0]
    df_sorted = df.sort_values(by='PCA_score', ascending=False)
    
    # L·∫•y d√≤ng t·ªët nh·∫•t
    best_option = df_sorted.head(1)
    
    # L·∫•y ch·ªâ s·ªë d√≤ng t·ªët nh·∫•t
    best_row_index = best_option.index[0] + 1  
    
    # Chuy·ªÉn k·∫øt qu·∫£ th√†nh chu·ªói ƒë·ªÉ d·ªÖ d√†ng truy·ªÅn v√†o template
    best_option_str = best_option.to_string(index=False)
    
    # Tr·∫£ v·ªÅ ph∆∞∆°ng √°n t·ªët nh·∫•t v√† ch·ªâ s·ªë d√≤ng
    return render_template('compare.html', result=best_option_str, best_row=best_row_index)



if __name__ == "__main__":
    app.run(debug=True)
